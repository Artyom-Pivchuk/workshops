p {
    margin: 0;
}

ul,li {
    margin: 0;
    padding: 0;
}

body {
    background-color: tomato;
}
/*=============================================MIN-WIDTH  MAX-WIDTH===============================================================*/
/*При помощи директивы @media мы можем отслеживать различные вещи: ширину и высоту вьюпорта, тип и ориентацию устройства, можем
отслеживать пиксельную плотность на мониторе у пользователя и т.п. Самое главное и основное, что нас интересует - это конечно же то, 
что мы можем отслеживать ширину вьюпорта.*/ 

/*@media вызов директивы и далее в круглых скобках записываем ширину вьюпорта в круглых скобках () и далее уже указываем в фигурных скобках
в каком селекторе и какие правила нам нужно добавить или переназначить.
   
@media (min-width: 400px) {
        body {
            background-color: teal;
        }
    }

Когда ширина вьюпорта в браузере будет 400px или больше, применить правила, что внутри*/

/*@media (min-width: 400px) {
    body {
        background-color: teal;
    }
}

/* Как отрабатывает этот медиа-запрос можно посмотреть в браузере с помощью режима мобильных устройств в инструментах разработчика -
иконка смартфона с планшетом - в этом режиме можно вручную изменить ширину вьюпорта и посмотреть как меняется фоновый цвет у <body>
при изменении ширины вьюпорта до заданных величин*/

/*Когда ширина вьюпорта в браузере будет 400px или больше, применить правила внутри*/

/*@media (min-width: 768px) {
    body {
        background-color: pink;
    }
}

/* Важно понимать как это работает. Когда браузеру подходит условие, т.е. заданное условие выполняется, тогда браузер можно сказать
распаковывает это медиа-правило и в наш css-код добавляются внутренние сss-свойства этого медиа-правила. Если условие не подходит - 
это медиа-правило игнорируется браузером, и соответственно ничего не распаковывается и не добавляется в наш css-код.    

При такой распаковке в наш код соответственно будут добавляться свойства с одинаковыми селекторами (в нашем случае body) И здесь
будут отрабатывать принципы специфичности селекторов - тоесть при одинаковых свойствах сработает то, которое находится ниже в нашем коде.

Например, в нашем случае при ширине вьюпорта 768px и больше, одновременно выполнятся два условия, и браузер распакует сразу два наших
медиа-запроса - наш css-код примет такой вид:

body {
    background-color: tomato;
}

body {
    background-color: teal;
}

body {
    background-color: pink;
}

и соответственно применится именно то правило, которое находится ниже в css-коде. Если поменять два последних медиа-запроса местами - 
сработает именно последнее в коде, вместо pink сработает teal.

Нужно помнить и учитывать эти нюансы, поэтому при написании min-width медиа-правил, нужно всегда идти от меньшего вьюпорта к большему - от минимального до максимального*/

/* При написании max-width медиа-правил нужно всегда идти от большего вьюпорта к меньшему - от максимального до минимального. */

/*==========================Метатег <meta name="viewport">=========================================================================*/

/*При создании новой веб-страницы в редакторе, плагин Emet автоматически создаёт нам внутри <head></head> сл. метатег
<meta name="viewport" content="width=device-width, initial-scale=1.0">

Он нужен для того, чтобы прировнять виртуальный вьюпорт к физическому вьюпорту конкретного мобильного устройства, и соответственно
для дальнейшей адекватной работы всех медиа-правил.*/

/*===================================================================================================================================*/

/*==============================================Логические операторы=================================================================*/

/*Логический оператор "AND" буквально "И" с помощью которого можно комбинировать условия*/

/*@media (min-width: 768px) and (max-width: 1199px) {
    body {
        background-color: aqua;
    }
}

/*В этом медиа-запросе заложены два условия скомбинированные при помощи логического оператора "and" или "и",
тоесть запрос будет выполнен только тогда, когда одновременно будут выполнены два условия - первое "и" второе.
Тоесть по сути в этот медиа-запрос заложен диапазон от 768px до 1199px. На практике такой диапазон вьюпорта используется для
назначения стилей для планшетных устройств. Ятобы посмотреть как работает этот медиа-запрос нужно убрать /* перед запросом, а затем
добавить, если нужно посмотреть работу других правил выше или ниже*/


/*Логический оператор "OR" буквально "ИЛИ" указывается не словом а запятой "," */

/*@media (max-width: 767px), (min-width: 1200px) {
    body {
        background-color: antiquewhite;
    }
}

/* В этом случае медиа-правило сработает когда выполнится одно из условий - или первое, или второе
На практике этот медиа-запрос применяется для того чтобы исключить из диапазона вьюпорта планшеты - 
первый диапазон используется для мобильных устройств, а второй для десктопов.*/ 


/*========================================Типы устройств==========================================*/
/*  all - значение по умолчанию - все типы устройств.
    screen - все устройства, которые имеют монитор.
    print - медиа-запрос для сайтов, которые подразумевают подготовку страниц для печати (новостные сайты, блоги и т.д.) При помощи этого запроса - мы 
    можем указать стили для страниц, которые будут выноситься на печать (можем отключить на них какие-то интерактивные элементы, ссылки, меню убрать из области печати и т.д.

    Например

    @media print {
        .menu {
            display: none;  - отключит меню навигации на странице печати 
        }

        .title {
            font-size: 28px; - переназначит размер шрифта заголовков на странице печати
            margin-bottom: 20 px; - переназначит отступы у заголовков на странице печати
        }

        .text {
            font-size: 28px; - переназначит размер шрифта для основного текста на странице печати
        }
    }

Тоесть благодаря медиа-правилу или медиа-запросу @media print {} мы настраиваем страницу для печати или 
страницу предварительного просмотра. Как правило, страницы печати, если такие имеются на сайте должны быть подготовлены
заранее дизайнером и включены в макет сайта*/

/* Поэтому при составлении медиа-запросов нужно указывать тип screen только для того, чтобы исключить тип print, поскольку для него 
должны быть предусмотрены отдельные CSS-свойства*/

/*===========================================Ориентация устройства==============================================*/

/* С помощью медиа-запросов мы также можем отслеживать ориентацию устройства - как держит в руках его пользователь,
что в данный момент имеет большее значение ширина или высота

@media screen and (orientation: landscape) {} - CSS-правила для альбомной ориентации устройства

@media screen and (orientation: portrait) {} - CSS-правила для портретной ориентации устройства*/


@media screen and (orientation: landscape) {
    body {
        background-color: teal;
    }
}

@media screen and (orientation: portrait) {
    body {
        background-color: aqua;
    }
}