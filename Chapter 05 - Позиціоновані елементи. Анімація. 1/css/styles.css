p {
    margin: 0;
}

ul,li {
    margin: 0;
    padding: 0;
}

.wrapper {
    width: 900px;
    margin: 0 auto;
    outline: 1px solid red;
}

.container {
    position: relative;
    width: 700px;
    margin: 0 auto;
    outline: 1px solid #000;
}

.box {
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: serif;
    color: #fff;
    font-size: 20px;
}

.red {
    width: 140px;
    height: 140px;
    background-color: red;
}

.blue {
    width: 100px;
    height: 100px;
    background-color: blue;
}

.yellow {
    width: 80px;
    height: 80px;
    background-color: #f1c40f;
}
/*контейнер between создал, чтобы визуально отделить блоки между собой*/
.between {
    width: 700px;
    height: 35px;
}

/*Зададим нашему синему блоку position: relative После этого по сути с элементом ничего не происходит - он остаётся в потоке 
и соседние элементы его ощущают рядом. Просто у этого элемента появляются дополнительные возможности и свойства, которыми до этого
мы воспользоваться не могли: при помощи свойств top right botoom left мы сможем смещать наш элемент относительно других элементов в потоке.
По умолчанию с использованием этих свойств top right bootom left мы обращаемся к верхнему левому углу элемента - отсчёт смещения идёт
от него и позиции самого элемента в потоке. Для других элементов наш смещенный таким образом синий контейнер попрежнему остался на
своём прежнем месте, тоесть какбы его место осталось зарезервированным. Но на практике такими приёмами практически не пользуются,
поскольку есть существенный минус - это и есть это зарезервированное место которое чувствуют все соседи в потоке*/

.var1 {
    position: relative;
    top: 20px;
    left: 20px;
    background-color: rgba(0,0 ,255, 0.5);
}

/*Зададим нашему синему блоку position: absolute; и сразу видим что ч ним произошло - Этим свойством мы "вытянули" этот элемент из потока
и его соседи перестали "чувствовать" его присутствие рядом. Жёлтый блок с номером 3 сразу сместился с красном блоку 1. И наш блок .container
сразу уменьшился по высоте, поскольку тоже больше не чувствует нашу 2.
Такому элементу мы также можем задавать смещения как и в предыдущем примере. При этом наш элемент с position: absolute; будет смещаться уже
относительно предка у которого свойство position отличается от static. Если же такого элемента нет среди предков, тогда такой элемент будет 
позиционироваться по последнему предку - а это наш .body
Теперь мы подошли до главного нюанса позиционировании - свойство position: relative; элементу задаётся только с целью "поймать" его потомка с
позицией position: absolute; Рассмотрим это на примере - зададим свойство position: relative; для контейнера .wrapper и будем позиционировать
наш синий блок 2 относительно его.*/

.var2 {
    position: absolute;
    background-color: rgba(0, 0, 255, 0.5);
    top: 50%;
    left: 50%;
}

.var3 {
    position: absolute;
    background-color: rgba(0, 0, 255, 0.5);
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
}

/*Чтобы наглядно увидеть как работает свойство z-index назначьте каждому элементу свойство, и меняйте эти значения друг у друга,
 чтобы увидеть как это работает*/
.container-var4 {
    height: 280px;
}

.red-var4 {
    position: absolute;
    z-index: -1;
}

.blue-var4 {
    position: absolute;
    z-index: 3;
}

.yellow-var4 {
    position: absolute;
    z-index: 4;
}

/*Уберите косые линии комментария и вы увидите как работает свойство fixed для третьего желтого блока
Этот блок будет позиционироваться от нашего вьюпорта и при скроле страницы всегда будет на экране*/

.yellow-var5 {
    position: fixed;
    top: 10px;
    left: 10px;
}
